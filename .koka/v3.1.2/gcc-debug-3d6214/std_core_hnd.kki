/* Internal effect handler primitives.
 
  Internal primitives to implement evidence based algebraic
  effect handlers. These are emitted by the compiler during evidence
  translation and this module is always implicitly imported.

  This module is compiled _without monadic translation_ and
  thus we need to do this by hand in this module which allows us to implement
  most primitives directly in Koka keeping the external C/JavaScript/etc primitives
  to a minimum.

  The paper:

  > Ningning Xie, and Daan Leijen. _Generalized Evidence Passing for Effect Handlers_,
  > or _efficient compilation of effect handlers to C_.
  > Proceedings of the ACM International Conference on Functional Programming (ICFP'21),
  > August 2021, Vol 5: pp. 71, doi: 10.1145/3473576.
  > <https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers-or-efficient-compilation-of-effect-handlers-to-c/>

  describes precisely how the monadic evidence translation works on which this
  module is based. Read this first to understand how this module works.

  Another paper of interest is:

  > Ningning Xie, and Daan Leijen. _Effect Handlers in Haskell, Evidently_.
  > The 13th ACM SIGPLAN International Haskell Symposium, (Haskell'20),
  > August 2020. <https://www.microsoft.com/en-us/research/uploads/prod/2020/07/effev.pdf>

  which which explains the internal typing of handlers, evidence vectors, etc. in a simpler setting.

  ## Notes

  An effect _row_ has kind `::E`, while an atomic effect kind is `::X`.
  (We will see that `::X` is equal to the kind `::(E,V) -> V` ) (`::V` is for value kinds *)

  We use the term "answer" context to talk about the result type `:r` and effect type `:e` of
  (the context of) the handler in the stack. The `:e` does not include the effect `::X` of the handler.

  - `:marker<e,r>` : a unique integer corresponding to an answer context `:<e,r>`. This functions
    as a dependent type: when the integer matches at runtime, that will be the type of the answer context.

  - handlers `:h` are partially applied types with signature `h<e,r> :: (E,V)->V`
    for some answer context `:<e,r>`. The handlers contain all operations (much like a virtual method table).
    (these handler types are generated by the compiler for each effect type)

  - Evidence `ev<h :: (E,V)->V >` for a handler `:h` is an existential tuple
    `forall e r. Ev( marker: marker<e,r>, hnd: h<e,r> )` containing the marker and the actual handler (pointer)
    for some answer context `:<e,r>` -- we don't know the answer context exact type as it depends on where
    the handler was dynamically bound; we just have evidence that this handler `:h` exists in our context.

  - Actually, we use a quadruple for the evidence (corresponding to the evidence as formalized in the generalized evidence paper).
    We also add the handler effect tag (`:htag<h>`) (for dynamic lookup), and the evidence vector
    of the answer context where the handler was defind (`:evv<e,r>`)
    (so we can execute operations in-place using the evidence vector at the point where they were defined).

  - Each operation definition in a handler is called a _clause_. For a one argument operation, we have:
    ```
    abstract value type clause1<a,b,h,e::E,r>
      Clause1( clause: (marker<e,r>, ev<h>, a) -> e b )
    ```
    defining an operation `:a -> b` for some handler `:h` in an answer context `:<e,r>`.
    (these are generated by the compiler from a handler definition)

  - An operation is performed by a rank-2 function:
    `fun perform1( ev : ev<h>, select-op : (forall<e1,r> h<e1,r> -> clause1<a,b,h,e1,r>), x : a ) : e b`
    where we can call an operation given evidence for a handler `:ev<h>` together with a
    polymorphic field selection function that for any handler `h` in _any_ answer context, returns its clause.
    It is defined as:
    ```
      match ev
        Ev(_tag,m,h,_answ) -> match select-op(h)  // for an abstract `:<e1,r>`
          Clause1(f) -> f(m,ev,x)
    ```

  - Each clause _definition_ can now determine to fully yield to the handler, or be tail-resumptive etc.
    (that is, this is determined at the handler definition site, not the call site, and generated by the compiler)
    For example, we could be most general (`ctl`) and yield back to the marker (where the handler was defined in the call-stack)
    (with a function that receives the continuation/resumption `k`):
    ```
    Clause1( fn(m,ev,x) yield-to(m, fn(k) op(k,x) ))
    ```
    or be super efficient and directly call the (tail-resumptive) operation in-place (`fun`):
    ```
    Clause1( fn(m,ev,x) op(x) )
    ```
    and various variants in-between. The last definition is unsafe for example if the (user defined) `op` invokes
    operations itself as the evidence vector should be the one as defined at the handler site.
    So, we norally use instead:
    ```
    Clause1( fn(m,ev,x) under1(ev,op,x) )
    ```
    where `under1` uses the evidence vector (`hevv`) stored in the evidence `ev` to execute `op(x)` under.
    (this is also explained in detail in the generalized evidence paper).

*/
module interface std/core/hnd
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/undiv = std/core/undiv = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
// Abstract type of Evidence vectors
type evv[135,1,135,14] <(e :: E)> :: E -> V ;
// The tag of a handler identifies the type at runtime (e.g. `"exn/core/std"`).
pub value{0,1,8} type htag[118,1,119,22] <(a :: (E, V) -> V)> :: ((E, V) -> V) -> V {
  con Htag[119,3,119,6](tagname: std/core/types/string){0,1,8} : forall<(a :: (E, V) -> V)> (tagname : std/core/types/string) -> (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>;
};
// _Internal_. The type of handler markers (usually `:int32_t`).
// Needed for effect handlers in `module std/core/hnd`.
value{4,0,4} type marker[151,7,151,25] <(e :: E),a> :: (E, V) -> V ;
// Effect handler evidence of a handler `:h` in the context.
pub type ev[131,1,132,72] <(a :: (E, V) -> V)> :: ((E, V) -> V) -> V {
  con Ev[132,7,132,8]<(e :: E),b>(htag: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, marker: (marker :: (E, V) -> V)<(e :: E),b>, hnd: (a :: (E, V) -> V)<(e :: E),b>, hevv: (evv :: E -> V)<(e :: E)>){4,3,8} : forall<(a :: (E, V) -> V),(e :: E),b> (htag : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, marker : (marker :: (E, V) -> V)<(e :: E),b>, hnd : (a :: (E, V) -> V)<(e :: E),b>, hevv : (evv :: E -> V)<(e :: E)>) -> (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>;
};
pub value{0,1,8} type clause0[645,1,646,48] <a,(b :: (E, V) -> V),(e :: E),c> :: (V, (E, V) -> V, E, V) -> V {
  con Clause0[646,3,646,9](clause: ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a){0,1,8} : forall<a,(b :: (E, V) -> V),(e :: E),c> (clause : ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>;
};
pub value{0,1,8} type clause1[553,1,554,51] <a,b,(c :: (E, V) -> V),(e :: E),d> :: (V, V, (E, V) -> V, E, V) -> V {
  con Clause1[554,3,554,9](clause: ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b){0,1,8} : forall<a,b,(c :: (E, V) -> V),(e :: E),d> (clause : ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>;
};
pub value{0,1,8} type clause2[691,1,692,56] <a,b,c,(d :: (E, V) -> V),(e :: E),a1> :: (V, V, V, (E, V) -> V, E, V) -> V {
  con Clause2[692,3,692,9](clause: ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c){0,1,8} : forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> (clause : ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>;
};
// Index into an evidence vector
pub alias ev-index[138,1,138,28] = std/core/types/ssize_t = 1;
value{0,2,8} type resume-result[353,7,356,24] <a,b> :: (V, V) -> V {
  con Deep[354,3,354,6](result: a){0,2,8} : forall<a,b> (result : a) -> (resume-result :: (V, V) -> V)<a,b>;
  con Shallow[355,3,355,9](result: a){0,2,8} : forall<a,b> (result : a) -> (resume-result :: (V, V) -> V)<a,b>;
  con Finalize[356,3,356,10](result: b){0,2,8} : forall<a,b> (result : b) -> (resume-result :: (V, V) -> V)<a,b>;
};
pub value{0,1,8} type resume-context[536,1,536,85] <a,(e :: E),(e1 :: E),b> :: (V, E, E, V) -> V {
  con Resume-context[536,23,536,36](k: ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b){0,1,8} : forall<a,(e :: E),(e1 :: E),b> (k : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) -> (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>;
};
pub type yield-info[320,1,320,19] ;
value{0,3,8} type yld[358,7,362,80] <(e :: E),a,b> :: (E, V, V) -> V {
  con Pure[359,3,359,6]{0,1,8} : forall<(e :: E),a,b> (yld :: (E, V, V) -> V)<(e :: E),a,b>;
  con YieldingFinal[360,3,360,15]{0,1,8} : forall<(e :: E),a,b> (yld :: (E, V, V) -> V)<(e :: E),a,b>;
  con Yielding[361,3,361,10]{0,1,8} : forall<(e :: E),a,b> (yld :: (E, V, V) -> V)<(e :: E),a,b>;
  con Yield[362,3,362,7]<c>(clause: (((resume-result :: (V, V) -> V)<c,b>) -> (e :: E) b) -> (e :: E) b, cont: (() -> c) -> (e :: E) a){0,3,8} : forall<(e :: E),a,b,c> (clause : (((resume-result :: (V, V) -> V)<c,b>) -> (e :: E) b) -> (e :: E) b, cont : (() -> c) -> (e :: E) a) -> (yld :: (E, V, V) -> V)<(e :: E),a,b>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `tagname` constructor field of the `:htag` type.
 fun htag/tagname[119,8,119,14] : forall<(a :: (E, V) -> V)> (^ htag : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> std/core/types/string;
pub  fun htag/@copy[119,3,119,6] : forall<(a :: (E, V) -> V)> (@this : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, tagname : (std/core/types/@optional :: V -> V)<std/core/types/string>) -> (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>;
// Automatically generated. Retrieves the `htag` constructor field of the `:ev` type.
 fun ev/htag[132,15,132,18] : forall<(a :: (E, V) -> V)> (^ ev : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>;
pub  fun ev/@copy[132,7,132,8] : forall<(a :: (E, V) -> V),(e :: E),b> (@this : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, htag : (std/core/types/@optional :: V -> V)<(htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>>, marker : (marker :: (E, V) -> V)<(e :: E),b>, hnd : (a :: (E, V) -> V)<(e :: E),b>, hevv : (evv :: E -> V)<(e :: E)>) -> (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>;
// Automatically generated. Retrieves the `clause` constructor field of the `:clause0` type.
 fun clause0/clause[646,12,646,17] : forall<a,(b :: (E, V) -> V),(e :: E),c> (^ clause0 : (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>) -> (((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a);
pub  fun clause0/@copy[646,3,646,9] : forall<a,(b :: (E, V) -> V),(e :: E),c> (@this : (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>, clause : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a>) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>;
// Automatically generated. Retrieves the `clause` constructor field of the `:clause1` type.
 fun clause1/clause[554,12,554,17] : forall<a,b,(c :: (E, V) -> V),(e :: E),d> (^ clause1 : (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>) -> (((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b);
pub  fun clause1/@copy[554,3,554,9] : forall<a,b,(c :: (E, V) -> V),(e :: E),d> (@this : (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>, clause : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>;
// Automatically generated. Retrieves the `clause` constructor field of the `:clause2` type.
 fun clause2/clause[692,12,692,17] : forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> (^ clause2 : (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>) -> (((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c);
pub  fun clause2/@copy[692,3,692,9] : forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> (@this : (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>, clause : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c>) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>;
// Automatically generated. Tests for the `Deep` constructor of the `:resume-result` type.
fip fun is-deep[354,3,354,6] : forall<a,b> (^ resume-result : (resume-result :: (V, V) -> V)<a,b>) -> std/core/types/bool;
// Automatically generated. Tests for the `Shallow` constructor of the `:resume-result` type.
fip fun is-shallow[355,3,355,9] : forall<a,b> (^ resume-result : (resume-result :: (V, V) -> V)<a,b>) -> std/core/types/bool;
// Automatically generated. Tests for the `Finalize` constructor of the `:resume-result` type.
fip fun is-finalize[356,3,356,10] : forall<a,b> (^ resume-result : (resume-result :: (V, V) -> V)<a,b>) -> std/core/types/bool;
// Automatically generated. Retrieves the `k` constructor field of the `:resume-context` type.
 fun resume-context/k[536,55,536,55] : forall<a,(e :: E),(e1 :: E),b> (^ @this : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>) -> (((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b);
pub  fun resume-context/@copy[536,23,536,36] : forall<a,(e :: E),(e1 :: E),b> (@this : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, k : (std/core/types/@optional :: V -> V)<((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b>) -> (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>;
// Automatically generated. Tests for the `Pure` constructor of the `:yld` type.
fip fun is-pure[359,3,359,6] : forall<a,b,(e :: E)> (^ yld : (yld :: (E, V, V) -> V)<(e :: E),a,b>) -> std/core/types/bool;
// Automatically generated. Tests for the `YieldingFinal` constructor of the `:yld` type.
fip fun is-yieldingFinal[360,3,360,15] : forall<a,b,(e :: E)> (^ yld : (yld :: (E, V, V) -> V)<(e :: E),a,b>) -> std/core/types/bool;
// Automatically generated. Tests for the `Yielding` constructor of the `:yld` type.
fip fun is-yielding[361,3,361,10] : forall<a,b,(e :: E)> (^ yld : (yld :: (E, V, V) -> V)<(e :: E),a,b>) -> std/core/types/bool;
// Automatically generated. Tests for the `Yield` constructor of the `:yld` type.
fip fun is-yield[362,3,362,7] : forall<a,b,(e :: E)> (^ yld : (yld :: (E, V, V) -> V)<(e :: E),a,b>) -> std/core/types/bool;
// _Internal_ hidden constructor for creating handler tags
pub  fun @new-htag[122,9,122,17] : forall<(a :: (E, V) -> V)> (tag : std/core/types/string) -> (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>;
// Show a handler tag.
pub  fun htag/show[126,9,126,17] : forall<(a :: (E, V) -> V)> (@pat-x126_20 : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> std/core/types/string;
// Are two markers equal?
 fun eq-marker[154,8,154,16] : forall<a,b,(e :: E),(e1 :: E)> (x : (marker :: (E, V) -> V)<(e :: E),a>, y : (marker :: (E, V) -> V)<(e1 :: E),b>) -> std/core/types/bool;
// Evidence equality compares the markers.
pub  fun ev/(==)[141,9,141,15] : forall<(a :: (E, V) -> V)> (@pat-x141_18 : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, @pat-x141_37 : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> std/core/types/bool;
 fun fresh-marker[157,8,157,19] : forall<a,(e :: E)> () -> (marker :: (E, V) -> V)<(e :: E),a>;
 fun fresh-marker-named[161,8,161,25] : forall<a,(e :: E)> () -> (marker :: (E, V) -> V)<(e :: E),a>;
// Insert new evidence into the given evidence vector.
 fun evv-insert[175,8,175,17] : forall<(e :: E),(e1 :: E),(a :: (E, V) -> V)> (evv : (evv :: E -> V)<(e :: E)>, ev : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> (e :: E) (evv :: E -> V)<(e1 :: E)>;
// show evidence for debug purposes
 fun evv-show[180,8,180,15] : forall<(e :: E)> (evv : (evv :: E -> V)<(e :: E)>) -> std/core/types/string;
// Is an evidence vector unchanged? (i.e. as pointer equality).
// This is used to avoid copying in common cases.
 fun evv-eq[186,8,186,13] : forall<(e :: E)> (evv0 : (evv :: E -> V)<(e :: E)>, evv1 : (evv :: E -> V)<(e :: E)>) -> std/core/types/bool;
// (dynamically) find evidence insertion/deletion index in the evidence vector
// The compiler optimizes `@evv-index` to a static index when apparent from the effect type.
pub  fun @evv-index[202,12,202,21] : forall<(e :: E),(a :: (E, V) -> V)> (htag : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> (e :: E) ev-index;
// Get the current evidence vector.
 fun evv-get[207,8,207,14] : forall<(e :: E)> () -> (e :: E) (evv :: E -> V)<(e :: E)>;
// Does the current evidence vector consist solely of affine handlers?
// This is called in backends that do not have context paths (like javascript)
// to optimize TRMC (where we can use faster update-in-place TRMC if we know the
// operations are all affine). As such, it is always safe to return `false`.
//
// control flow context:
//                 -1: none: bottom
//                   /          \
// 0: except: never resumes   1: linear: resumes exactly once
//                   \          /
//           2: affine: resumes never or once
//                        |
//     3: multi: resumes never, once, or multiple times
//
pub  fun @evv-is-affine[230,12,230,25] : () -> std/core/types/bool;
// Remove evidence at index `i` of the current evidence vector, and return the old one.
// (used by `mask`)
 fun evv-swap-delete[247,8,247,22] : forall<(e :: E),(e1 :: E)> (i : ev-index, behind : std/core/types/bool) -> (e1 :: E) (evv :: E -> V)<(e :: E)>;
// Swap the current evidence vector with a new vector consisting of evidence
// at indices `indices` in the current vector.
 fun evv-swap-create[265,8,265,22] : forall<(e :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>) -> (e :: E) (evv :: E -> V)<(e :: E)>;
pub  fun yield-extend[283,21,283,32] : forall<a,b,(e :: E)> (next : (a) -> (e :: E) b) -> (e :: E) b;
pub  fun yield-bind[287,16,287,25] : forall<a,b,(e :: E)> (x : a, next : (a) -> (e :: E) b) -> (e :: E) b;
pub  fun yield-bind2[290,16,290,26] : forall<a,b,(e :: E)> (x : a, extend : (a) -> (e :: E) b, next : (a) -> (e :: E) b) -> (e :: E) b;
 fun yield-cont[293,8,293,17] : forall<a,(e :: E),b> (f : forall<c> ((c) -> (e :: E) a, c) -> (e :: E) b) -> (e :: E) b;
 fun yield-prompt[301,8,301,19] : forall<a,(e :: E),b> (m : (marker :: (E, V) -> V)<(e :: E),b>) -> (yld :: (E, V, V) -> V)<(e :: E),a,b>;
 fun yield-to-prim[305,8,305,20] : forall<a,(e :: E),(e1 :: E),b> (m : (marker :: (E, V) -> V)<(e1 :: E),b>, clause : (((resume-result :: (V, V) -> V)<a,b>) -> (e1 :: E) b) -> (e1 :: E) b) -> (e :: E) (() -> a);
 fun yield-to-final[309,8,309,21] : forall<a,(e :: E),(e1 :: E),b> (m : (marker :: (E, V) -> V)<(e1 :: E),b>, clause : (((resume-result :: (V, V) -> V)<a,b>) -> (e1 :: E) b) -> (e1 :: E) b) -> (e :: E) a;
 fun yield-to[313,14,313,21] : forall<a,(e :: E),b> (m : (marker :: (E, V) -> V)<(e :: E),b>, clause : (((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) -> (e :: E) b) -> (e :: E) a;
 fun yield-capture[322,8,322,20] : forall<(e :: E)> () -> (e :: E) yield-info;
pub  fun unsafe-reyield[326,12,326,25] : forall<a,(e :: E)> (yld : yield-info) -> (e :: E) a;
 fun guard[364,8,364,12] : forall<(e :: E)> (w : (evv :: E -> V)<(e :: E)>) -> (e :: E) ();
 fun resume-final[368,8,368,19] : forall<a> () -> a;
 fun prompt[372,5,372,10] : forall<a,(e :: E),(b :: (E, V) -> V),c> (w0 : (evv :: E -> V)<(e :: E)>, w1 : (evv :: E -> V)<(e :: E)>, ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, m : (marker :: (E, V) -> V)<(e :: E),c>, ret : (a) -> (e :: E) c, result : a) -> (e :: E) c;
pub  fun @hhandle[408,18,408,25] : forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> (tag : (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, h : (b :: (E, V) -> V)<(e :: E),c>, ret : (a) -> (e :: E) c, action : () -> (e1 :: E) a) -> (e :: E) c;
pub  fun @named-handle[423,18,423,30] : forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> (tag : (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, h : (b :: (E, V) -> V)<(e :: E),c>, ret : (a) -> (e :: E) c, action : ((ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a) -> (e :: E) c;
 fun mask-at1[434,5,434,12] : forall<a,b,(e :: E),(e1 :: E)> (i : ev-index, behind : std/core/types/bool, action : (a) -> (e :: E) b, x : a) -> (e1 :: E) b;
pub  fun @mask-at[441,9,441,16] : forall<a,(e :: E),(e1 :: E)> (i : ev-index, behind : std/core/types/bool, action : () -> (e :: E) a) -> (e1 :: E) a;
// mask for builtin effects without a handler or evidence (like `:st` or `:local`)
pub  fun @mask-builtin[449,9,449,21] : forall<a,(e :: E),(e1 :: E)> (action : () -> (e :: E) a) -> (e1 :: E) a;
 fun prompt-local-var[457,5,457,20] : forall<a,b,(h :: H)> (loc : (std/core/types/local-var :: (H, V) -> V)<(h :: H),a>, res : b) -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>> b;
pub  fun local-var[462,16,462,24] : forall<a,b,(e :: E),(h :: H)> (init : a, action : (l : (std/core/types/local-var :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b;
 fun finally-prompt[476,5,476,18] : forall<a,(e :: E)> (fin : () -> (e :: E) (), res : a) -> (e :: E) a;
pub  fun finally[473,9,473,15] : forall<a,(e :: E)> (fin : () -> (e :: E) (), action : () -> (e :: E) a) -> (e :: E) a;
 fun initially-prompt[517,5,517,20] : forall<a,(e :: E)> (init : (std/core/types/int) -> (e :: E) (), res : a) -> (e :: E) a;
pub  fun initially[512,9,512,17] : forall<a,(e :: E)> (init : (std/core/types/int) -> (e :: E) (), action : () -> (e :: E) a) -> (e :: E) a;
pub  fun resume[538,9,538,14] : forall<a,(e :: E),(e1 :: E),b> (r : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x : a) -> (e :: E) b;
pub  fun resume-shallow[541,9,541,22] : forall<a,(e :: E),(e1 :: E),b> (r : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x : a) -> (e1 :: E) b;
pub  fun finalize[545,9,545,16] : forall<a,(e :: E),(e1 :: E),b> (r : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x : b) -> (e :: E) b;
pub  fun @perform1[566,16,566,24] : forall<a,b,(c :: (E, V) -> V),(e :: E)> (ev : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op : forall<(e1 :: E),d> ((c :: (E, V) -> V)<(e1 :: E),d>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>, x : a) -> (e :: E) b;
 fun evv-swap-with[571,5,571,17] : forall<(a :: (E, V) -> V),(e :: E)> (ev : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) -> (evv :: E -> V)<(e :: E)>;
// extra under1x to make under1 inlineable
 fun under1x[584,14,584,20] : forall<a,b,(e :: E),(c :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op : (a) -> (e :: E) b, x : a) -> (e :: E) b;
 fun under1[575,12,575,17] : forall<a,b,(e :: E),(c :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op : (a) -> (e :: E) b, x : a) -> (e :: E) b;
pub  fun clause-control-raw1[592,9,592,27] : forall<a,b,(e :: E),(e1 :: E),(c :: (E, V) -> V),d> (op : (x : a, r : (resume-context :: (V, E, E, V) -> V)<b,(e :: E),(e1 :: E),d>) -> (e :: E) d) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>;
 fun get[595,5,595,7] : forall<a,(h :: H)> (ref : (std/core/types/ref :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/read :: H -> X)<(h :: H)>,(std/core/types/div :: X)> a;
 fun protect-check[601,5,601,17] : forall<a,(e :: E),b> (resumed : (std/core/types/ref :: (H, V) -> V)<(std/core/types/global :: H),std/core/types/bool>, k : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b, res : b) -> (e :: E) b;
 fun protect[607,5,607,11] : forall<a,b,(e :: E),c> (x : a, clause : (x : a, k : (b) -> (e :: E) c) -> (e :: E) c, k : ((resume-result :: (V, V) -> V)<b,c>) -> (e :: E) c) -> (e :: E) c;
// generic control clause
pub  fun clause-control1[622,9,622,23] : forall<a,b,(e :: E),(c :: (E, V) -> V),d> (clause : (x : a, k : (b) -> (e :: E) d) -> (e :: E) d) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>;
// tail-resumptive clause: resumes exactly once at the end
// (these can be executed 'in-place' without capturing a resumption)
pub  fun clause-tail1[627,9,627,20] : forall<(e :: E),a,(b :: (E, V) -> V),c,d> (op : (c) -> (e :: E) d) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<c,d,(b :: (E, V) -> V),(e :: E),a>;
// tail-resumptive clause that does not itself invoke operations
// (these can be executed 'in-place' without setting the correct evidence vector)
pub  fun clause-tail-noop1[632,9,632,25] : forall<(e :: E),a,(b :: (E, V) -> V),c,d> (op : (c) -> (e :: E) d) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<c,d,(b :: (E, V) -> V),(e :: E),a>;
// clause that never resumes (e.g. an exception handler)
// (these do not need to capture a resumption and execute finally clauses upfront)
pub  fun clause-never1[637,9,637,21] : forall<a,b,(e :: E),(c :: (E, V) -> V),d> (op : (a) -> (e :: E) d) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>;
//inline extern cast-hnd( h : h<e1,r> ) : e h<e,r> { inline "#1"//inline extern cast-marker( m : marker<e1,r> ) : e marker<e,r> { inline "#1"
pub  fun @perform0[650,16,650,24] : forall<a,(e :: E),(b :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, op : forall<(e1 :: E),c> ((b :: (E, V) -> V)<(e1 :: E),c>) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>) -> (e :: E) a;
 fun under0[655,12,655,17] : forall<a,(e :: E),(b :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, op : () -> (e :: E) a) -> (e :: E) a;
pub  fun clause-control-raw0[663,9,663,27] : forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> (op : ((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),c>) -> (e :: E) c) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>;
pub  fun clause-control0[671,9,671,23] : forall<a,(e :: E),(b :: (E, V) -> V),c> (op : ((a) -> (e :: E) c) -> (e :: E) c) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>;
pub  fun clause-tail0[675,9,675,20] : forall<(e :: E),a,(b :: (E, V) -> V),c> (op : () -> (e :: E) c) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-tail-noop0[678,9,678,25] : forall<(e :: E),a,(b :: (E, V) -> V),c> (op : () -> (e :: E) c) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<c,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-value[681,9,681,20] : forall<a,(e :: E),(b :: (E, V) -> V),c> (v : a) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>;
pub  fun clause-never0[684,9,684,21] : forall<a,(e :: E),(b :: (E, V) -> V),c> (op : () -> (e :: E) c) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>;
 fun under2[694,5,694,10] : forall<a,b,c,(e :: E),(d :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, op : (a, b) -> (e :: E) c, x1 : a, x2 : b) -> (e :: E) c;
 fun protect2[701,5,701,12] : forall<a,b,c,(e :: E),d> (x1 : a, x2 : b, clause : (x : a, x : b, k : (c) -> (e :: E) d) -> (e :: E) d, k : ((resume-result :: (V, V) -> V)<c,d>) -> (e :: E) d) -> (e :: E) d;
pub  fun clause-control2[710,9,710,23] : forall<a,b,c,(e :: E),(d :: (E, V) -> V),a1> (clause : (x1 : a, x2 : b, k : (c) -> (e :: E) a1) -> (e :: E) a1) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>;
pub  fun clause-control-raw2[714,9,714,27] : forall<a,b,c,(e :: E),(e1 :: E),(d :: (E, V) -> V),a1> (op : (x1 : a, x2 : b, r : (resume-context :: (V, E, E, V) -> V)<c,(e :: E),(e1 :: E),a1>) -> (e :: E) a1) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>;
pub  fun clause-tail2[717,9,717,20] : forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1> (op : (c, d) -> (e :: E) a1) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<c,d,a1,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-tail-noop2[720,9,720,25] : forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1> (op : (c, d) -> (e :: E) a1) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<c,d,a1,(b :: (E, V) -> V),(e :: E),a>;
pub  fun @perform2[723,16,723,24] : forall<a,b,c,(e :: E),(d :: (E, V) -> V)> (evx : (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, op : forall<(e1 :: E),a1> ((d :: (E, V) -> V)<(e1 :: E),a1>) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>, x : a, y : b) -> (e :: E) c;
pub  fun clause-never2[728,9,728,21] : forall<a,b,c,(e :: E),(d :: (E, V) -> V),a1> (op : (a, b) -> (e :: E) a1) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>;
// For interal use
 fun xperform1[738,5,738,13] : forall<a,b,(e :: E),(c :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op : forall<(e1 :: E),d> ((c :: (E, V) -> V)<(e1 :: E),d>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>, x : a) -> (e :: E) b;
pub  fun clause-control-raw3[743,9,743,27] : forall<a,b,c,d,(e :: E),(e1 :: E),(a1 :: (E, V) -> V),b1> (op : (x1 : a, x2 : b, x3 : c, r : (resume-context :: (V, E, E, V) -> V)<d,(e :: E),(e1 :: E),b1>) -> (e :: E) b1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>;
pub  fun clause-control3[746,9,746,23] : forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V),b1> (op : (x1 : a, x2 : b, x3 : c, k : (d) -> (e :: E) b1) -> (e :: E) b1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>;
pub  fun clause-tail3[749,9,749,20] : forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1> (op : (c, d, a1) -> (e :: E) b1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(c, d, a1),b1,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-tail-noop3[752,9,752,25] : forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1> (op : (c, d, a1) -> (e :: E) b1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(c, d, a1),b1,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-never3[755,9,755,21] : forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V),b1> (op : (a, b, c) -> (e :: E) b1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>;
pub  fun @perform3[758,9,758,17] : forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, op : forall<(e1 :: E),b1> ((a1 :: (E, V) -> V)<(e1 :: E),b1>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c),d,(a1 :: (E, V) -> V),(e1 :: E),b1>, x1 : a, x2 : b, x3 : c) -> (e :: E) d;
 fun under3[761,5,761,10] : forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, op : (a, b, c) -> (e :: E) d, x1 : a, x2 : b, x3 : c) -> (e :: E) d;
pub  fun clause-control4[770,9,770,23] : forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V),c1> (op : (x1 : a, x2 : b, x3 : c, x4 : d, k : (a1) -> (e :: E) c1) -> (e :: E) c1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),c1>;
pub  fun clause-tail4[773,9,773,20] : forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1,c1> (op : (c, d, a1, b1) -> (e :: E) c1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(c, d, a1, b1),c1,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-tail-noop4[776,9,776,25] : forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1,c1> (op : (c, d, a1, b1) -> (e :: E) c1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(c, d, a1, b1),c1,(b :: (E, V) -> V),(e :: E),a>;
pub  fun clause-never4[779,9,779,21] : forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V),c1> (op : (a, b, c, d) -> (e :: E) c1) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),c1>;
pub  fun @perform4[782,9,782,17] : forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, op : forall<(e1 :: E),c1> ((b1 :: (E, V) -> V)<(e1 :: E),c1>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e1 :: E),c1>, x1 : a, x2 : b, x3 : c, x4 : d) -> (e :: E) a1;
 fun under4[785,5,785,10] : forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V)> (ev : (ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, op : (a, b, c, d) -> (e :: E) a1, x1 : a, x2 : b, x3 : c, x4 : d) -> (e :: E) a1;
pub  fun @open-none0[797,9,797,19] : forall<a,(e :: E),(e1 :: E)> (f : () -> (e :: E) a) -> (e1 :: E) a;
pub  fun @open-none1[803,9,803,19] : forall<a,b,(e :: E),(e1 :: E)> (f : (a) -> (e :: E) b, x1 : a) -> (e1 :: E) b;
pub  fun @open-none2[809,9,809,19] : forall<a,b,c,(e :: E),(e1 :: E)> (f : (a, b) -> (e :: E) c, x1 : a, x2 : b) -> (e1 :: E) c;
pub  fun @open-none3[815,9,815,19] : forall<a,b,c,d,(e :: E),(e1 :: E)> (f : (a, b, c) -> (e :: E) d, x1 : a, x2 : b, x3 : c) -> (e1 :: E) d;
pub  fun @open-none4[821,9,821,19] : forall<a,b,c,d,a1,(e :: E),(e1 :: E)> (f : (a, b, c, d) -> (e :: E) a1, x1 : a, x2 : b, x3 : c, x4 : d) -> (e1 :: E) a1;
 fun open-at1[828,14,828,21] : forall<a,b,(e :: E),(e1 :: E)> (i : ev-index, f : (a) -> (e :: E) b, x : a) -> (e1 :: E) b;
pub  fun @open-at0[835,9,835,17] : forall<a,(e :: E),(e1 :: E)> (i : ev-index, f : () -> (e :: E) a) -> (e1 :: E) a;
pub  fun @open-at1[842,9,842,17] : forall<a,b,(e :: E),(e1 :: E)> (i : ev-index, f : (a) -> (e :: E) b, x : a) -> (e1 :: E) b;
pub  fun @open-at2[849,9,849,17] : forall<a,b,c,(e :: E),(e1 :: E)> (i : ev-index, f : (a, b) -> (e :: E) c, x1 : a, x2 : b) -> (e1 :: E) c;
pub  fun @open-at3[856,9,856,17] : forall<a,b,c,d,(e :: E),(e1 :: E)> (i : ev-index, f : (a, b, c) -> (e :: E) d, x1 : a, x2 : b, x3 : c) -> (e1 :: E) d;
pub  fun @open-at4[863,9,863,17] : forall<a,b,c,d,a1,(e :: E),(e1 :: E)> (i : ev-index, f : (a, b, c, d) -> (e :: E) a1, x1 : a, x2 : b, x3 : c, x4 : d) -> (e1 :: E) a1;
 fun open1[871,14,871,18] : forall<a,b,(e :: E),(e1 :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>, f : (a) -> (e :: E) b, x : a) -> (e1 :: E) b;
pub  fun @open0[879,9,879,14] : forall<a,(e :: E),(e1 :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>, f : () -> (e :: E) a) -> (e1 :: E) a;
pub  fun @open1[886,9,886,14] : forall<a,b,(e :: E),(e1 :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>, f : (a) -> (e :: E) b, x : a) -> (e1 :: E) b;
pub  fun @open2[893,9,893,14] : forall<a,b,c,(e :: E),(e1 :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>, f : (a, b) -> (e :: E) c, x1 : a, x2 : b) -> (e1 :: E) c;
pub  fun @open3[900,9,900,14] : forall<a,b,c,d,(e :: E),(e1 :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>, f : (a, b, c) -> (e :: E) d, x1 : a, x2 : b, x3 : c) -> (e1 :: E) d;
pub  fun @open4[907,9,907,14] : forall<a,b,c,d,a1,(e :: E),(e1 :: E)> (indices : (std/core/types/vector :: V -> V)<ev-index>, f : (a, b, c, d) -> (e :: E) a1, x1 : a, x2 : b, x3 : c, x4 : d) -> (e1 :: E) a1;
 fun try-finalize-prompt[921,5,921,23] : forall<a,(e :: E)> (res : a) -> (e :: E) (std/core/types/either :: (V, V) -> V)<yield-info,a>;
pub  fun unsafe-try-finalize[918,9,918,27] : forall<a,(e :: E)> (action : () -> (e :: E) a) -> (e :: E) (std/core/types/either :: (V, V) -> V)<yield-info,a>;
 
//------------------------------
//#kki: external declarations
 
// Return the evidence at index `i` in the current evidence vector.
pub  extern @evv-at[196,19,196,25] : forall<(a :: (E, V) -> V)> (i : ev-index) -> (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> {
  c inline "kk_evv_at(#1,kk_context())";
  js inline "$std_core_hnd._evv_at(#1)";
};
// Set the current evidence vector.
 extern evv-set[212,15,212,21] : forall<(e :: E),(e1 :: E)> (w : (evv :: E -> V)<(e1 :: E)>) -> (e :: E) () {
  c inline "kk_evv_set(#1,kk_context())";
  js inline "$std_core_hnd._evv_set(#1)";
};
// Swap the current evidence vector with `w`
 extern evv-swap[241,15,241,22] : forall<(e :: E),(e1 :: E),(e2 :: E)> (w : (evv :: E -> V)<(e1 :: E)>) -> (e :: E) (evv :: E -> V)<(e2 :: E)> {
  c inline "kk_evv_swap(#1,kk_context())";
  js inline "$std_core_hnd._evv_swap(#1)";
};
// Swap the current evidence vector with an empty vector.
// (this is used in open calls to switch to a total context)
 extern evv-swap-create0[253,15,253,30] : forall<(e :: E)> () -> (e :: E) (evv :: E -> V)<(e :: E)> {
  c inline "kk_evv_swap_create0(kk_context())";
  js inline "$std_core_hnd._evv_swap_create0()";
};
// Swap the current evidence vector with a singleton vector (with the evidence at current index `i`).
// (this is common in open calls to switch to a singleton effect context when calling operations)
 extern evv-swap-create1[259,15,259,30] : forall<(e :: E)> (i : ev-index) -> (e :: E) (evv :: E -> V)<(e :: E)> {
  c inline "kk_evv_swap_create1(#1,kk_context())";
  js inline "$std_core_hnd._evv_swap_create1(#1)";
};
pub  extern yielding[275,19,275,26] : () -> std/core/types/bool {
  c inline "kk_yielding(kk_context())";
  js inline "$std_core_hnd._yielding()";
};
pub  extern yielding-non-final[279,19,279,36] : () -> std/core/types/bool {
  c inline "kk_yielding_non_final(kk_context())";
  js inline "$std_core_hnd._yielding_non_final()";
};
 extern keep-yielding-final[297,15,297,33] : forall<(e :: E),a> () -> (e :: E) a {
  c inline "kk_box_any(kk_context())";
  js inline "undefined";
};
 extern cast-ev0[335,15,335,22] : forall<a,(e :: E),(e1 :: E)> (f : () -> (e1 :: E) a) -> (() -> (e :: E) a) = inline "#1";
 extern cast-ev1[338,15,338,22] : forall<a,b,(e :: E),(e1 :: E)> (f : (a) -> (e1 :: E) b) -> ((a) -> (e :: E) b) = inline "#1";
 extern cast-ev2[341,15,341,22] : forall<a,b,c,(e :: E),(e1 :: E)> (f : (a, b) -> (e1 :: E) c) -> ((a, b) -> (e :: E) c) = inline "#1";
 extern cast-ev3[344,15,344,22] : forall<a,b,c,d,(e :: E),(e1 :: E)> (f : (a, b, c) -> (e1 :: E) d) -> ((a, b, c) -> (e :: E) d) = inline "#1";
 extern cast-ev4[347,15,347,22] : forall<a,b,c,d,a1,(e :: E),(e1 :: E)> (f : (a, b, c, d) -> (e1 :: E) a1) -> ((a, b, c, d) -> (e :: E) a1) = inline "#1";
 extern cast-ev5[350,15,350,22] : forall<a,b,c,d,a1,b1,(e :: E),(e1 :: E)> (f : (a, b, c, d, a1) -> (e1 :: E) b1) -> ((a, b, c, d, a1) -> (e :: E) b1) = inline "#1";
// add integers
 extern add[500,15,500,17] : (i : std/core/types/int, j : std/core/types/int) -> std/core/types/int {
  c inline "kk_integer_add(#1,#2,kk_context())";
  cs inline "(#1 + #2)";
  js inline "(#1 + #2)";
};
// are two integers equal?
 extern eq[506,15,506,16] : (^ x : std/core/types/int, ^ y : std/core/types/int) -> std/core/types/bool {
  c inline "kk_integer_eq_borrow(#1,#2,kk_context())";
  cs inline "(#1 == #2)";
  js inline "(#1 == #2)";
};
 extern cast-clause0[556,15,556,26] : forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> (f : ((marker :: (E, V) -> V)<(e1 :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a) -> (e :: E) (((marker :: (E, V) -> V)<(e1 :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) = inline "#1";
 extern cast-clause1[559,15,559,26] : forall<a,b,(e :: E),(e1 :: E),(c :: (E, V) -> V),d> (f : ((marker :: (E, V) -> V)<(e1 :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) -> (e :: E) (((marker :: (E, V) -> V)<(e1 :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) = inline "#1";
 extern cast-clause2[562,15,562,26] : forall<a,b,c,(e :: E),(e1 :: E),(d :: (E, V) -> V),a1> (f : ((marker :: (E, V) -> V)<(e1 :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e1 :: E) c) -> (e :: E) (((marker :: (E, V) -> V)<(e1 :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) = inline "#1";
 extern unsafe-st[598,15,598,23] : forall<a,(e :: E)> (f : () -> <(std/core/types/st :: H -> E)<(std/core/types/global :: H)>|(e :: E)> a) -> (() -> (e :: E) a) = inline "#1";
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun htag/tagname // inline size: 0
  = forall<(a :: (E, V) -> V)> fn(htag: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){
    (match (htag) {
      ((@skip std/core/hnd/Htag((@x: std/core/types/string) : std/core/types/string) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
         -> @x;
    });
  };
 fun htag/@copy // inline size: 2
  = forall<(a :: (E, V) -> V)> fn(@this: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, tagname: (std/core/types/@optional :: V -> V)<std/core/types/string>){
    std/core/hnd/Htag<(a :: (E, V) -> V)>((match (tagname) {
      ((std/core/types/@Optional((@uniq-tagname@1879: std/core/types/string) : std/core/types/string) : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
         -> @uniq-tagname@1879;
      ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/string> ) as @pat@0: ((std/core/types/@optional :: V -> V)<std/core/types/string>))
         -> (match (@this) {
          ((@skip std/core/hnd/Htag((@x: std/core/types/string) : std/core/types/string) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
             -> @x;
        });
    }));
  };
inline borrow "^"  fun ev/htag // inline size: 0
  = forall<(a :: (E, V) -> V)> fn(ev: (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){
    (match (ev) {
      ((@skip std/core/hnd/Ev<(e :: E),b>((@x: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (@pat@0: (marker :: (E, V) -> V)<(e :: E),b>) : (marker :: (E, V) -> V)<(e :: E),b>, (@pat@1: (a :: (E, V) -> V)<(e :: E),b>) : (a :: (E, V) -> V)<(e :: E),b>, (@pat@2: (evv :: E -> V)<(e :: E)>) : (evv :: E -> V)<(e :: E)>) : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
         -> @x;
    });
  };
 fun ev/@copy // inline size: 2
  = forall<(a :: (E, V) -> V),(e :: E),b> fn(@this: (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, htag: (std/core/types/@optional :: V -> V)<(htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>>, marker: (marker :: (E, V) -> V)<(e :: E),b>, hnd: (a :: (E, V) -> V)<(e :: E),b>, hevv: (evv :: E -> V)<(e :: E)>){
    std/core/hnd/Ev<(a :: (E, V) -> V),(e :: E),b>((match (htag) {
        ((std/core/types/@Optional((@uniq-htag@1930: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (std/core/types/@optional :: V -> V)<(htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>> ) as @pat: ((std/core/types/@optional :: V -> V)<(htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>>))
           -> @uniq-htag@1930;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<(htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>> ) as @pat@0: ((std/core/types/@optional :: V -> V)<(htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>>))
           -> (match (@this) {
            ((@skip std/core/hnd/Ev<(e1 :: E),c>((@x: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (@pat@0@0: (marker :: (E, V) -> V)<(e1 :: E),c>) : (marker :: (E, V) -> V)<(e1 :: E),c>, (@pat@1@0: (a :: (E, V) -> V)<(e1 :: E),c>) : (a :: (E, V) -> V)<(e1 :: E),c>, (@pat@2: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@1: ((ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
               -> @x;
          });
      }), marker, hnd, hevv);
  };
inline borrow "^"  fun clause0/clause // inline size: 0
  = forall<a,(b :: (E, V) -> V),(e :: E),c> fn(clause0: (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>){
    (match (clause0) {
      ((@skip std/core/hnd/Clause0((@x: ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat: ((clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>))
         -> @x;
    });
  };
 fun clause0/@copy // inline size: 2
  = forall<a,(b :: (E, V) -> V),(e :: E),c> fn(@this: (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>, clause: (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a>){
    std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((match (clause) {
      ((std/core/types/@Optional((@uniq-clause@2030: ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a> ) as @pat: ((std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a>))
         -> @uniq-clause@2030;
      ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a> ) as @pat@0: ((std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a>))
         -> (match (@this) {
          ((@skip std/core/hnd/Clause0((@x: ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : ((marker :: (E, V) -> V)<(e :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) a) : (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c> ) as @pat@1: ((clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e :: E),c>))
             -> @x;
        });
    }));
  };
inline borrow "^"  fun clause1/clause // inline size: 0
  = forall<a,b,(c :: (E, V) -> V),(e :: E),d> fn(clause1: (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>){
    (match (clause1) {
      ((@skip std/core/hnd/Clause1((@x: ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat: ((clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>))
         -> @x;
    });
  };
 fun clause1/@copy // inline size: 2
  = forall<a,b,(c :: (E, V) -> V),(e :: E),d> fn(@this: (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>, clause: (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b>){
    std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((match (clause) {
      ((std/core/types/@Optional((@uniq-clause@2152: ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b> ) as @pat: ((std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b>))
         -> @uniq-clause@2152;
      ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b> ) as @pat@0: ((std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b>))
         -> (match (@this) {
          ((@skip std/core/hnd/Clause1((@x: ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : ((marker :: (E, V) -> V)<(e :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e :: E) b) : (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d> ) as @pat@1: ((clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e :: E),d>))
             -> @x;
        });
    }));
  };
inline borrow "^"  fun clause2/clause // inline size: 0
  = forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> fn(clause2: (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>){
    (match (clause2) {
      ((@skip std/core/hnd/Clause2((@x: ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat: ((clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>))
         -> @x;
    });
  };
 fun clause2/@copy // inline size: 2
  = forall<a,b,c,(d :: (E, V) -> V),(e :: E),a1> fn(@this: (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>, clause: (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c>){
    std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((match (clause) {
      ((std/core/types/@Optional((@uniq-clause@2300: ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c> ) as @pat: ((std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c>))
         -> @uniq-clause@2300;
      ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c> ) as @pat@0: ((std/core/types/@optional :: V -> V)<((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c>))
         -> (match (@this) {
          ((@skip std/core/hnd/Clause2((@x: ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : ((marker :: (E, V) -> V)<(e :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e :: E) c) : (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1> ) as @pat@1: ((clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e :: E),a1>))
             -> @x;
        });
    }));
  };
inline borrow "^" fip fun is-deep // inline size: 1
  = forall<a,b> fn(resume-result: (resume-result :: (V, V) -> V)<a,b>){
    (match (resume-result) {
      ((std/core/hnd/Deep((@pat@0: a) : a) : (resume-result :: (V, V) -> V)<a,b> ) as @pat: ((resume-result :: (V, V) -> V)<a,b>))
         -> std/core/types/True;
      (@pat@1: ((resume-result :: (V, V) -> V)<a,b>))
         -> std/core/types/False;
    });
  };
inline borrow "^" fip fun is-shallow // inline size: 1
  = forall<a,b> fn(resume-result: (resume-result :: (V, V) -> V)<a,b>){
    (match (resume-result) {
      ((std/core/hnd/Shallow((@pat@0: a) : a) : (resume-result :: (V, V) -> V)<a,b> ) as @pat: ((resume-result :: (V, V) -> V)<a,b>))
         -> std/core/types/True;
      (@pat@1: ((resume-result :: (V, V) -> V)<a,b>))
         -> std/core/types/False;
    });
  };
inline borrow "^" fip fun is-finalize // inline size: 1
  = forall<a,b> fn(resume-result: (resume-result :: (V, V) -> V)<a,b>){
    (match (resume-result) {
      ((std/core/hnd/Finalize((@pat@0: b) : b) : (resume-result :: (V, V) -> V)<a,b> ) as @pat: ((resume-result :: (V, V) -> V)<a,b>))
         -> std/core/types/True;
      (@pat@1: ((resume-result :: (V, V) -> V)<a,b>))
         -> std/core/types/False;
    });
  };
inline borrow "^"  fun resume-context/k // inline size: 0
  = forall<a,(e :: E),(e1 :: E),b> fn(@this: (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>){
    (match (@this) {
      ((@skip std/core/hnd/Resume-context((@x: ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))
         -> @x;
    });
  };
 fun resume-context/@copy // inline size: 2
  = forall<a,(e :: E),(e1 :: E),b> fn(@this: (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, k: (std/core/types/@optional :: V -> V)<((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b>){
    std/core/hnd/Resume-context<a,(e :: E),(e1 :: E),b>((match (k) {
      ((std/core/types/@Optional((@uniq-k@2484: ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (std/core/types/@optional :: V -> V)<((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b> ) as @pat: ((std/core/types/@optional :: V -> V)<((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b>))
         -> @uniq-k@2484;
      ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b> ) as @pat@0: ((std/core/types/@optional :: V -> V)<((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b>))
         -> (match (@this) {
          ((@skip std/core/hnd/Resume-context((@x: ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat@1: ((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))
             -> @x;
        });
    }));
  };
inline borrow "^" fip fun is-pure // inline size: 1
  = forall<a,b,(e :: E)> fn(yld: (yld :: (E, V, V) -> V)<(e :: E),a,b>){
    (match (yld) {
      ((std/core/hnd/Pure() : (yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/True;
      (@pat@0: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/False;
    });
  };
inline borrow "^" fip fun is-yieldingFinal // inline size: 1
  = forall<a,b,(e :: E)> fn(yld: (yld :: (E, V, V) -> V)<(e :: E),a,b>){
    (match (yld) {
      ((std/core/hnd/YieldingFinal() : (yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/True;
      (@pat@0: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/False;
    });
  };
inline borrow "^" fip fun is-yielding // inline size: 1
  = forall<a,b,(e :: E)> fn(yld: (yld :: (E, V, V) -> V)<(e :: E),a,b>){
    (match (yld) {
      ((std/core/hnd/Yielding() : (yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/True;
      (@pat@0: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/False;
    });
  };
inline borrow "^" fip fun is-yield // inline size: 1
  = forall<a,b,(e :: E)> fn(yld: (yld :: (E, V, V) -> V)<(e :: E),a,b>){
    (match (yld) {
      ((std/core/hnd/Yield<c>((@pat@0: (((resume-result :: (V, V) -> V)<c,b>) -> (e :: E) b) -> (e :: E) b) : (((resume-result :: (V, V) -> V)<c,b>) -> (e :: E) b) -> (e :: E) b, (@pat@1: (() -> c) -> (e :: E) a) : (() -> c) -> (e :: E) a) : (yld :: (E, V, V) -> V)<(e :: E),a,b> ) as @pat: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/True;
      (@pat@2: ((yld :: (E, V, V) -> V)<(e :: E),a,b>))
         -> std/core/types/False;
    });
  };
 fun @new-htag // inline size: 1
  = forall<(a :: (E, V) -> V)> fn(tag: std/core/types/string){
    std/core/hnd/Htag<(a :: (E, V) -> V)>(tag);
  };
inline  fun htag/show // inline size: 0
  = forall<(a :: (E, V) -> V)> fn(@pat-x126_20: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){
    (match (@pat-x126_20) {
      ((@skip std/core/hnd/Htag((tag: std/core/types/string) : std/core/types/string) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
         -> tag;
    });
  };
 fun ev/(==) // inline size: 1
  = forall<(a :: (E, V) -> V)> fn(@pat-x141_18: (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, @pat-x141_37: (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){
    (match (@pat-x141_18) {
      ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (m1: (marker :: (E, V) -> V)<(e :: E),b>) : (marker :: (E, V) -> V)<(e :: E),b>, (@pat@1: (a :: (E, V) -> V)<(e :: E),b>) : (a :: (E, V) -> V)<(e :: E),b>, (@pat@2: (evv :: E -> V)<(e :: E)>) : (evv :: E -> V)<(e :: E)>) : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
         -> (match (@pat-x141_37) {
          ((@skip std/core/hnd/Ev<(e1 :: E),c>((@pat@4: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (m2: (marker :: (E, V) -> V)<(e1 :: E),c>) : (marker :: (E, V) -> V)<(e1 :: E),c>, (@pat@5: (a :: (E, V) -> V)<(e1 :: E),c>) : (a :: (E, V) -> V)<(e1 :: E),c>, (@pat@6: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat@3: ((ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
             -> std/core/hnd/eq-marker<b,c,(e :: E),(e1 :: E)>(m1, m2);
        });
    });
  };
inline  fun yield-bind // inline size: 0
  = forall<a,b,(e :: E)> fn<(e :: E)>(x: a, next: (a) -> (e :: E) b){
    (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),() -> std/core/types/bool,() -> (e :: E) std/core/types/bool>(std/core/hnd/yielding)())) {
      ((std/core/types/True() : std/core/types/bool ) as @pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<a,b,(e :: E)>(next);
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0: std/core/types/bool)
         -> next(x);
    });
  };
inline  fun yield-bind2 // inline size: 0
  = forall<a,b,(e :: E)> fn<(e :: E)>(x: a, extend: (a) -> (e :: E) b, next: (a) -> (e :: E) b){
    (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),() -> std/core/types/bool,() -> (e :: E) std/core/types/bool>(std/core/hnd/yielding)())) {
      ((std/core/types/True() : std/core/types/bool ) as @pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<a,b,(e :: E)>(extend);
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0: std/core/types/bool)
         -> next(x);
    });
  };
 fun @mask-builtin // inline size: 3
  = forall<a,(e :: E),(e1 :: E)> fn<(e1 :: E)>(action: () -> (e :: E) a){
    std/core/types/@open<(std/core/types/total :: E),(e1 :: E),(f : () -> (e :: E) a) -> (() -> (e1 :: E) a),(f : () -> (e :: E) a) -> (e1 :: E) (() -> (e1 :: E) a)>((std/core/hnd/cast-ev0<a,(e1 :: E),(e :: E)>))(action)();
  };
inline  fun local-var // inline size: 9
  = forall<a,b,(e :: E),(h :: H)> fn<<(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>>(init: a, action: (l : (std/core/types/local-var :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b){
    std/core/types/@open<(std/core/types/total :: E),<(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,(action : () -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b) -> (() -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b),(action : () -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> (() -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b)>((std/core/undiv/pretend-nodiv-cast<<(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,b>))((fn<<(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>>(){
      val loc[464,9,464,11] : ((std/core/types/local-var :: (H, V) -> V)<(h :: H),a>)
        = (std/core/types/local-new<a,<(std/core/types/div :: X)|(e :: E)>,(h :: H)>(init));
      val res[465,9,465,11] : b
        = (std/core/types/@open<(std/core/types/total :: E),<(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,(f : ((std/core/types/local-var :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b) -> (((std/core/types/local-var :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b),(f : ((std/core/types/local-var :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b) -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> (((std/core/types/local-var :: (H, V) -> V)<(h :: H),a>) -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b)>((std/core/hnd/cast-ev1<(std/core/types/local-var :: (H, V) -> V)<(h :: H),a>,b,<(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,<(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>>))(action)(loc));
      (std/core/types/@open<<(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>>,<(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,(loc : (std/core/types/local-var :: (H, V) -> V)<(h :: H),a>, res : b) -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>> b,(loc : (std/core/types/local-var :: (H, V) -> V)<(h :: H),a>, res : b) -> <(std/core/types/div :: X),(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> b>((std/core/hnd/prompt-local-var<a,b,(h :: H)>))(loc, res));
    }))();
  };
 fun finally // inline size: 2
  = forall<a,(e :: E)> fn<(e :: E)>(fin: () -> (e :: E) (), action: () -> (e :: E) a){
    std/core/hnd/finally-prompt<a,(e :: E)>(fin, (action()));
  };
 fun resume // inline size: 4
  = forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(r: (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x: a){
    std/core/types/@open<(std/core/types/total :: E),(e :: E),((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>) -> (((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b),((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>) -> (e :: E) (((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b)>((fn(@this: (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>){
      (match (@this) {
        ((@skip std/core/hnd/Resume-context((@x: ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))
           -> @x;
      });
    }))(r)((std/core/hnd/Deep<a,b>(x)));
  };
 fun finalize // inline size: 4
  = forall<a,(e :: E),(e1 :: E),b> fn<(e :: E)>(r: (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>, x: b){
    std/core/types/@open<(std/core/types/total :: E),(e :: E),((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>) -> (((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b),((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>) -> (e :: E) (((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b)>((fn(@this: (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>){
      (match (@this) {
        ((@skip std/core/hnd/Resume-context((@x: ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : ((resume-result :: (V, V) -> V)<a,b>) -> (e :: E) b) : (resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b> ) as @pat: ((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),b>))
           -> @x;
      });
    }))(r)((std/core/hnd/Finalize<a,b>(x)));
  };
inline  fun @perform1 // inline size: 4
  = forall<a,b,(c :: (E, V) -> V),(e :: E)> fn<(e :: E)>(ev: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: forall<(e1 :: E),d> ((c :: (E, V) -> V)<(e1 :: E),d>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>, x: a){
    (match (ev) {
      ((@skip std/core/hnd/Ev<(e1 :: E),d>((@pat@0: (htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, (m: (marker :: (E, V) -> V)<(e1 :: E),d>) : (marker :: (E, V) -> V)<(e1 :: E),d>, (h: (c :: (E, V) -> V)<(e1 :: E),d>) : (c :: (E, V) -> V)<(e1 :: E),d>, (@pat@1: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>))
         -> (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),((c :: (E, V) -> V)<(e1 :: E),d>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>,((c :: (E, V) -> V)<(e1 :: E),d>) -> (e :: E) (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>>((op<(e1 :: E),d>))(h))) {
          ((@skip std/core/hnd/Clause1((f: ((marker :: (E, V) -> V)<(e1 :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : ((marker :: (E, V) -> V)<(e1 :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d> ) as @pat@2: ((clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>))
             -> std/core/hnd/cast-clause1<a,b,(e :: E),(e1 :: E),(c :: (E, V) -> V),d>(f)(m, ev, x);
        });
    });
  };
 fun evv-swap-with // inline size: 1
  = forall<(a :: (E, V) -> V),(e :: E)> fn(ev: (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>){
    (match (ev) {
      ((@skip std/core/hnd/Ev<(e1 :: E),b>((@pat@0: (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>, (@pat@1: (marker :: (E, V) -> V)<(e1 :: E),b>) : (marker :: (E, V) -> V)<(e1 :: E),b>, (@pat@2: (a :: (E, V) -> V)<(e1 :: E),b>) : (a :: (E, V) -> V)<(e1 :: E),b>, (w: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(a :: (E, V) -> V)>))
         -> std/core/hnd/evv-swap<(std/core/types/total :: E),(e1 :: E),(e :: E)>(w);
    });
  };
inline  fun under1 // inline size: 12
  = forall<a,b,(e :: E),(c :: (E, V) -> V)> fn<(e :: E)>(ev: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: (a) -> (e :: E) b, x: a){
    val w0[576,7,576,8] : (evv :: E -> V)<(_e1 :: E)>
      = std/core/types/@open<(std/core/types/total :: E),(e :: E),(ev : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) -> (evv :: E -> V)<(_e1 :: E)>,(ev : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) -> (e :: E) (evv :: E -> V)<(_e1 :: E)>>((fn(ev@0: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>){
        (match (ev@0) {
          ((@skip std/core/hnd/Ev<(e1 :: E),d>((@pat@0: (htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, (@pat@1: (marker :: (E, V) -> V)<(e1 :: E),d>) : (marker :: (E, V) -> V)<(e1 :: E),d>, (@pat@2: (c :: (E, V) -> V)<(e1 :: E),d>) : (c :: (E, V) -> V)<(e1 :: E),d>, (w: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>))
             -> std/core/hnd/evv-swap<(std/core/types/total :: E),(e1 :: E),(_e2 :: E)>(w);
        });
      }))(ev);
    val y[577,7,577,7] : b
      = op(x);
    (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),() -> std/core/types/bool,() -> (e :: E) std/core/types/bool>(std/core/hnd/yielding)())) {
      ((std/core/types/True() : std/core/types/bool ) as @pat@3: std/core/types/bool)
         -> std/core/hnd/yield-cont<b,(e :: E),b>((forall<d> fn<(e :: E)>(cont: (d) -> (e :: E) b, res: d){
          std/core/hnd/under1x<d,b,(e :: E),(c :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),(e :: E),(x : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) -> (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>,(x : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) -> (e :: E) (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>>((std/core/undiv/pretend-decreasing<(ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>>))(ev)), cont, res);
        }));
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0@0: std/core/types/bool)
         -> val _@0[580,3,580,13] : ()
                  = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0);
        y;
    });
  };
 fun clause-control-raw1 // inline size: 4
  = forall<a,b,(e :: E),(e1 :: E),(c :: (E, V) -> V),d> fn(op: (x : a, r : (resume-context :: (V, E, E, V) -> V)<b,(e :: E),(e1 :: E),d>) -> (e :: E) d){
    std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),d>, @_wildcard-x593_16: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, x: a){
      (std/core/hnd/yield-to<b,(e :: E),d>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<b,d>) -> (e :: E) d){
          (op(x, (std/core/hnd/Resume-context<b,(e :: E),(e1 :: E),d>(k))));
        })));
    }));
  };
 fun get // inline size: 1
  = forall<a,(h :: H)> fn<<(std/core/types/read :: H -> X)<(h :: H)>,(std/core/types/div :: X)>>(ref: (std/core/types/ref :: (H, V) -> V)<(h :: H),a>){
    std/core/types/#ref/(!)<(h :: H),a,<(std/core/types/div :: X)>>(ref);
  };
 fun clause-control1 // inline size: 3
  = forall<a,b,(e :: E),(c :: (E, V) -> V),d> fn(clause: (x : a, k : (b) -> (e :: E) d) -> (e :: E) d){
    std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),d>, @_wildcard-x623_16: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, x: a){
      (std/core/hnd/yield-to<b,(e :: E),d>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<b,d>) -> (e :: E) d){
          (std/core/hnd/protect<a,b,(e :: E),d>(x, clause, k));
        })));
    }));
  };
 fun clause-tail-noop1 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d> fn(op: (c) -> (e :: E) d){
    std/core/hnd/Clause1<c,d,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x633_14: (marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x633_17: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: c){
      (op(x));
    }));
  };
 fun clause-never1 // inline size: 3
  = forall<a,b,(e :: E),(c :: (E, V) -> V),d> fn(op: (a) -> (e :: E) d){
    std/core/hnd/Clause1<a,b,(c :: (E, V) -> V),(e :: E),d>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),d>, @_wildcard-x638_16: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, x: a){
      (std/core/hnd/yield-to-final<b,(e :: E),(e :: E),d>(m, (fn<(e :: E)>(@_wildcard-x638_45: ((resume-result :: (V, V) -> V)<b,d>) -> (e :: E) d){
          (op(x));
        })));
    }));
  };
inline  fun @perform0 // inline size: 4
  = forall<a,(e :: E),(b :: (E, V) -> V)> fn<(e :: E)>(ev: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, op: forall<(e1 :: E),c> ((b :: (E, V) -> V)<(e1 :: E),c>) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>){
    (match (ev) {
      ((@skip std/core/hnd/Ev<(e1 :: E),c>((@pat@0: (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (m: (marker :: (E, V) -> V)<(e1 :: E),c>) : (marker :: (E, V) -> V)<(e1 :: E),c>, (h: (b :: (E, V) -> V)<(e1 :: E),c>) : (b :: (E, V) -> V)<(e1 :: E),c>, (@pat@1: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>))
         -> (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),((b :: (E, V) -> V)<(e1 :: E),c>) -> (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>,((b :: (E, V) -> V)<(e1 :: E),c>) -> (e :: E) (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>>((op<(e1 :: E),c>))(h))) {
          ((@skip std/core/hnd/Clause0((f: ((marker :: (E, V) -> V)<(e1 :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a) : ((marker :: (E, V) -> V)<(e1 :: E),c>, (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e1 :: E) a) : (clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c> ) as @pat@2: ((clause0 :: (V, (E, V) -> V, E, V) -> V)<a,(b :: (E, V) -> V),(e1 :: E),c>))
             -> std/core/hnd/cast-clause0<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c>(f)(m, ev);
        });
    });
  };
inline  fun under0 // inline size: 21
  = forall<a,(e :: E),(b :: (E, V) -> V)> fn<(e :: E)>(ev: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, op: () -> (e :: E) a){
    val w0[656,7,656,8] : (evv :: E -> V)<(_e1 :: E)>
      = std/core/types/@open<(std/core/types/total :: E),(e :: E),(ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (evv :: E -> V)<(_e1 :: E)>,(ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) (evv :: E -> V)<(_e1 :: E)>>((fn(ev@0: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
        (match (ev@0) {
          ((@skip std/core/hnd/Ev<(e1 :: E),c>((@pat@0: (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1: (marker :: (E, V) -> V)<(e1 :: E),c>) : (marker :: (E, V) -> V)<(e1 :: E),c>, (@pat@2: (b :: (E, V) -> V)<(e1 :: E),c>) : (b :: (E, V) -> V)<(e1 :: E),c>, (w: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>))
             -> std/core/hnd/evv-swap<(std/core/types/total :: E),(e1 :: E),(_e2 :: E)>(w);
        });
      }))(ev);
    val y[657,7,657,7] : a
      = op();
    val _[659,3,659,13] : ()
      = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0);
    (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),() -> std/core/types/bool,() -> (e :: E) std/core/types/bool>(std/core/hnd/yielding)())) {
      ((std/core/types/True() : std/core/types/bool ) as @pat@3: std/core/types/bool)
         -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<c> fn<(e :: E)>(cont: (c) -> (e :: E) a, res: c){
          val w0@0[576,7,576,8] : (evv :: E -> V)<(_e1 :: E)>
            = std/core/types/@open<(std/core/types/total :: E),(e :: E),(ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (evv :: E -> V)<(_e1 :: E)>,(ev : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) (evv :: E -> V)<(_e1 :: E)>>((fn(ev@2: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
              (match (ev@2) {
                ((@skip std/core/hnd/Ev<(e1 :: E),d>((@pat@0@0: (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, (@pat@1@0: (marker :: (E, V) -> V)<(e1 :: E),d>) : (marker :: (E, V) -> V)<(e1 :: E),d>, (@pat@2@0: (b :: (E, V) -> V)<(e1 :: E),d>) : (b :: (E, V) -> V)<(e1 :: E),d>, (w@0: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)> ) as @pat@4: ((ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>))
                   -> std/core/hnd/evv-swap<(std/core/types/total :: E),(e1 :: E),(_e2 :: E)>(w@0);
              });
            }))(ev);
          val y@0[577,7,577,7] : a
            = cont(res);
          (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),() -> std/core/types/bool,() -> (e :: E) std/core/types/bool>(std/core/hnd/yielding)())) {
            ((std/core/types/True() : std/core/types/bool ) as @pat@5: std/core/types/bool)
               -> std/core/hnd/yield-cont<a,(e :: E),a>((forall<d> fn<(e :: E)>(cont@0: (d) -> (e :: E) a, res@0: d){
                std/core/hnd/under1x<d,a,(e :: E),(b :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),(e :: E),(x : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>,(x : (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>) -> (e :: E) (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>>((std/core/undiv/pretend-decreasing<(ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>>))(ev)), cont@0, res@0);
              }));
            ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0@1: std/core/types/bool)
               -> val _@0[580,3,580,13] : ()
                        = std/core/hnd/evv-set<(e :: E),(_e1 :: E)>(w0@0);
              y@0;
          });
        }));
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0@2: std/core/types/bool)
         -> y;
    });
  };
 fun clause-control-raw0 // inline size: 4
  = forall<a,(e :: E),(e1 :: E),(b :: (E, V) -> V),c> fn(op: ((resume-context :: (V, E, E, V) -> V)<a,(e :: E),(e1 :: E),c>) -> (e :: E) c){
    std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x664_16: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
      (std/core/hnd/yield-to<a,(e :: E),c>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<a,c>) -> (e :: E) c){
          (op((std/core/hnd/Resume-context<a,(e :: E),(e1 :: E),c>(k))));
        })));
    }));
  };
 fun clause-control0 // inline size: 4
  = forall<a,(e :: E),(b :: (E, V) -> V),c> fn(op: ((a) -> (e :: E) c) -> (e :: E) c){
    std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x672_16: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
      (std/core/hnd/yield-to<a,(e :: E),c>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<a,c>) -> (e :: E) c){
          (std/core/hnd/protect<(),a,(e :: E),c>(std/core/types/Unit, (fn<(e :: E)>(@_wildcard-x672_55: (), r: (a) -> (e :: E) c){
              (op(r));
            }), k));
        })));
    }));
  };
 fun clause-tail-noop0 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c> fn(op: () -> (e :: E) c){
    std/core/hnd/Clause0<c,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x679_14: (marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x679_17: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
      (op());
    }));
  };
 fun clause-value // inline size: 1
  = forall<a,(e :: E),(b :: (E, V) -> V),c> fn(v: a){
    std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(@_wildcard-x682_14: (marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x682_17: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
      v;
    }));
  };
 fun clause-never0 // inline size: 3
  = forall<a,(e :: E),(b :: (E, V) -> V),c> fn(op: () -> (e :: E) c){
    std/core/hnd/Clause0<a,(b :: (E, V) -> V),(e :: E),c>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),c>, @_wildcard-x685_16: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>){
      (std/core/hnd/yield-to-final<a,(e :: E),(e :: E),c>(m, (fn<(e :: E)>(@_wildcard-x685_43: ((resume-result :: (V, V) -> V)<a,c>) -> (e :: E) c){
          (op());
        })));
    }));
  };
 fun clause-control2 // inline size: 3
  = forall<a,b,c,(e :: E),(d :: (E, V) -> V),a1> fn(clause: (x1 : a, x2 : b, k : (c) -> (e :: E) a1) -> (e :: E) a1){
    std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),a1>, @_wildcard-x711_16: (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, x1: a, x2: b){
      (std/core/hnd/yield-to<c,(e :: E),a1>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<c,a1>) -> (e :: E) a1){
          (std/core/hnd/protect2<a,b,c,(e :: E),a1>(x1, x2, clause, k));
        })));
    }));
  };
 fun clause-control-raw2 // inline size: 4
  = forall<a,b,c,(e :: E),(e1 :: E),(d :: (E, V) -> V),a1> fn(op: (x1 : a, x2 : b, r : (resume-context :: (V, E, E, V) -> V)<c,(e :: E),(e1 :: E),a1>) -> (e :: E) a1){
    std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),a1>, @_wildcard-x715_16: (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, x1: a, x2: b){
      (std/core/hnd/yield-to<c,(e :: E),a1>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<c,a1>) -> (e :: E) a1){
          (op(x1, x2, (std/core/hnd/Resume-context<c,(e :: E),(e1 :: E),a1>(k))));
        })));
    }));
  };
 fun clause-tail2 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1> fn(op: (c, d) -> (e :: E) a1){
    std/core/hnd/Clause2<c,d,a1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),a>, ev: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x1: c, x2: d){
      (std/core/hnd/under2<c,d,a1,(e :: E),(b :: (E, V) -> V)>(ev, op, x1, x2));
    }));
  };
 fun clause-tail-noop2 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1> fn(op: (c, d) -> (e :: E) a1){
    std/core/hnd/Clause2<c,d,a1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x721_14: (marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x721_17: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x1: c, x2: d){
      (op(x1, x2));
    }));
  };
inline  fun @perform2 // inline size: 4
  = forall<a,b,c,(e :: E),(d :: (E, V) -> V)> fn<(e :: E)>(evx: (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, op: forall<(e1 :: E),a1> ((d :: (E, V) -> V)<(e1 :: E),a1>) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>, x: a, y: b){
    (match (evx) {
      ((@skip std/core/hnd/Ev<(e1 :: E),a1>((@pat@0: (htag :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, (m: (marker :: (E, V) -> V)<(e1 :: E),a1>) : (marker :: (E, V) -> V)<(e1 :: E),a1>, (h: (d :: (E, V) -> V)<(e1 :: E),a1>) : (d :: (E, V) -> V)<(e1 :: E),a1>, (@pat@1: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>))
         -> (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),((d :: (E, V) -> V)<(e1 :: E),a1>) -> (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>,((d :: (E, V) -> V)<(e1 :: E),a1>) -> (e :: E) (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>>((op<(e1 :: E),a1>))(h))) {
          ((@skip std/core/hnd/Clause2((f: ((marker :: (E, V) -> V)<(e1 :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e1 :: E) c) : ((marker :: (E, V) -> V)<(e1 :: E),a1>, (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, a, b) -> (e1 :: E) c) : (clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1> ) as @pat@2: ((clause2 :: (V, V, V, (E, V) -> V, E, V) -> V)<a,b,c,(d :: (E, V) -> V),(e1 :: E),a1>))
             -> std/core/hnd/cast-clause2<a,b,c,(e :: E),(e1 :: E),(d :: (E, V) -> V),a1>(f)(m, evx, x, y);
        });
    });
  };
 fun clause-never2 // inline size: 3
  = forall<a,b,c,(e :: E),(d :: (E, V) -> V),a1> fn(op: (a, b) -> (e :: E) a1){
    std/core/hnd/Clause2<a,b,c,(d :: (E, V) -> V),(e :: E),a1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),a1>, @_wildcard-x729_16: (ev :: ((E, V) -> V) -> V)<(d :: (E, V) -> V)>, x1: a, x2: b){
      (std/core/hnd/yield-to-final<c,(e :: E),(e :: E),a1>(m, (fn<(e :: E)>(@_wildcard-x729_49: ((resume-result :: (V, V) -> V)<c,a1>) -> (e :: E) a1){
          (op(x1, x2));
        })));
    }));
  };
 fun xperform1 // inline size: 4
  = forall<a,b,(e :: E),(c :: (E, V) -> V)> fn<(e :: E)>(ev: (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, op: forall<(e1 :: E),d> ((c :: (E, V) -> V)<(e1 :: E),d>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>, x: a){
    (match (ev) {
      ((@skip std/core/hnd/Ev<(e1 :: E),d>((@pat@0: (htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>) : (htag :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, (m: (marker :: (E, V) -> V)<(e1 :: E),d>) : (marker :: (E, V) -> V)<(e1 :: E),d>, (h: (c :: (E, V) -> V)<(e1 :: E),d>) : (c :: (E, V) -> V)<(e1 :: E),d>, (@pat@1: (evv :: E -> V)<(e1 :: E)>) : (evv :: E -> V)<(e1 :: E)>) : (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)> ) as @pat: ((ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>))
         -> (match ((std/core/types/@open<(std/core/types/total :: E),(e :: E),((c :: (E, V) -> V)<(e1 :: E),d>) -> (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>,((c :: (E, V) -> V)<(e1 :: E),d>) -> (e :: E) (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>>((op<(e1 :: E),d>))(h))) {
          ((@skip std/core/hnd/Clause1((f: ((marker :: (E, V) -> V)<(e1 :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : ((marker :: (E, V) -> V)<(e1 :: E),d>, (ev :: ((E, V) -> V) -> V)<(c :: (E, V) -> V)>, a) -> (e1 :: E) b) : (clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d> ) as @pat@2: ((clause1 :: (V, V, (E, V) -> V, E, V) -> V)<a,b,(c :: (E, V) -> V),(e1 :: E),d>))
             -> std/core/hnd/cast-clause1<a,b,(e :: E),(e1 :: E),(c :: (E, V) -> V),d>(f)(m, ev, x);
        });
    });
  };
 fun clause-control-raw3 // inline size: 4
  = forall<a,b,c,d,(e :: E),(e1 :: E),(a1 :: (E, V) -> V),b1> fn(op: (x1 : a, x2 : b, x3 : c, r : (resume-context :: (V, E, E, V) -> V)<d,(e :: E),(e1 :: E),b1>) -> (e :: E) b1){
    std/core/hnd/Clause1<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),b1>, @_wildcard-x593_16: (ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, x: (a, b, c)){
      (std/core/hnd/yield-to<d,(e :: E),b1>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<d,b1>) -> (e :: E) b1){
          (match (x) {
            ((@skip std/core/types/Tuple3((x1: a) : a, (x2: b) : b, (x3: c) : c) : (a, b, c) ) as @pat: (a, b, c))
               -> op(x1, x2, x3, (std/core/hnd/Resume-context<d,(e :: E),(e1 :: E),b1>(k)));
          });
        })));
    }));
  };
 fun clause-control3 // inline size: 4
  = forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V),b1> fn(op: (x1 : a, x2 : b, x3 : c, k : (d) -> (e :: E) b1) -> (e :: E) b1){
    std/core/hnd/Clause1<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),b1>, @_wildcard-x623_16: (ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, x: (a, b, c)){
      (std/core/hnd/yield-to<d,(e :: E),b1>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<d,b1>) -> (e :: E) b1){
          (std/core/hnd/protect<(a, b, c),d,(e :: E),b1>(x, (fn<(e :: E)>(@pat-x747_23: (a, b, c), k@0: (d) -> (e :: E) b1){
              (match (@pat-x747_23) {
                ((@skip std/core/types/Tuple3((x1: a) : a, (x2: b) : b, (x3: c) : c) : (a, b, c) ) as @pat: (a, b, c))
                   -> op(x1, x2, x3, k@0);
              });
            }), k));
        })));
    }));
  };
 fun clause-tail3 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1> fn(op: (c, d, a1) -> (e :: E) b1){
    std/core/hnd/clause-tail1<(e :: E),a,(b :: (E, V) -> V),(c, d, a1),b1>((fn<(e :: E)>(@pat-x750_20: (c, d, a1)){
      (match (@pat-x750_20) {
        ((@skip std/core/types/Tuple3((x1: c) : c, (x2: d) : d, (x3: a1) : a1) : (c, d, a1) ) as @pat: (c, d, a1))
           -> op(x1, x2, x3);
      });
    }));
  };
 fun clause-tail-noop3 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1> fn(op: (c, d, a1) -> (e :: E) b1){
    std/core/hnd/Clause1<(c, d, a1),b1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x633_14: (marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x633_17: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: (c, d, a1)){
      (match (x) {
        ((@skip std/core/types/Tuple3((x1: c) : c, (x2: d) : d, (x3: a1) : a1) : (c, d, a1) ) as @pat: (c, d, a1))
           -> op(x1, x2, x3);
      });
    }));
  };
 fun clause-never3 // inline size: 3
  = forall<a,b,c,d,(e :: E),(a1 :: (E, V) -> V),b1> fn(op: (a, b, c) -> (e :: E) b1){
    std/core/hnd/Clause1<(a, b, c),d,(a1 :: (E, V) -> V),(e :: E),b1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),b1>, @_wildcard-x638_16: (ev :: ((E, V) -> V) -> V)<(a1 :: (E, V) -> V)>, x: (a, b, c)){
      (std/core/hnd/yield-to-final<d,(e :: E),(e :: E),b1>(m, (fn<(e :: E)>(@_wildcard-x638_45: ((resume-result :: (V, V) -> V)<d,b1>) -> (e :: E) b1){
          (match (x) {
            ((@skip std/core/types/Tuple3((x1: a) : a, (x2: b) : b, (x3: c) : c) : (a, b, c) ) as @pat: (a, b, c))
               -> op(x1, x2, x3);
          });
        })));
    }));
  };
 fun clause-control4 // inline size: 4
  = forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V),c1> fn(op: (x1 : a, x2 : b, x3 : c, x4 : d, k : (a1) -> (e :: E) c1) -> (e :: E) c1){
    std/core/hnd/Clause1<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),c1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),c1>, @_wildcard-x623_16: (ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, x: (a, b, c, d)){
      (std/core/hnd/yield-to<a1,(e :: E),c1>(m, (fn<(e :: E)>(k: ((resume-result :: (V, V) -> V)<a1,c1>) -> (e :: E) c1){
          (std/core/hnd/protect<(a, b, c, d),a1,(e :: E),c1>(x, (fn<(e :: E)>(@pat-x771_23: (a, b, c, d), k@0: (a1) -> (e :: E) c1){
              (match (@pat-x771_23) {
                ((@skip std/core/types/Tuple4((x1: a) : a, (x2: b) : b, (x3: c) : c, (x4: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))
                   -> op(x1, x2, x3, x4, k@0);
              });
            }), k));
        })));
    }));
  };
 fun clause-tail4 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1,c1> fn(op: (c, d, a1, b1) -> (e :: E) c1){
    std/core/hnd/clause-tail1<(e :: E),a,(b :: (E, V) -> V),(c, d, a1, b1),c1>((fn<(e :: E)>(@pat-x774_20: (c, d, a1, b1)){
      (match (@pat-x774_20) {
        ((@skip std/core/types/Tuple4((x1: c) : c, (x2: d) : d, (x3: a1) : a1, (x4: b1) : b1) : (c, d, a1, b1) ) as @pat: (c, d, a1, b1))
           -> op(x1, x2, x3, x4);
      });
    }));
  };
 fun clause-tail-noop4 // inline size: 2
  = forall<(e :: E),a,(b :: (E, V) -> V),c,d,a1,b1,c1> fn(op: (c, d, a1, b1) -> (e :: E) c1){
    std/core/hnd/Clause1<(c, d, a1, b1),c1,(b :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(@_wildcard-x633_14: (marker :: (E, V) -> V)<(e :: E),a>, @_wildcard-x633_17: (ev :: ((E, V) -> V) -> V)<(b :: (E, V) -> V)>, x: (c, d, a1, b1)){
      (match (x) {
        ((@skip std/core/types/Tuple4((x1: c) : c, (x2: d) : d, (x3: a1) : a1, (x4: b1) : b1) : (c, d, a1, b1) ) as @pat: (c, d, a1, b1))
           -> op(x1, x2, x3, x4);
      });
    }));
  };
 fun clause-never4 // inline size: 3
  = forall<a,b,c,d,a1,(e :: E),(b1 :: (E, V) -> V),c1> fn(op: (a, b, c, d) -> (e :: E) c1){
    std/core/hnd/Clause1<(a, b, c, d),a1,(b1 :: (E, V) -> V),(e :: E),c1>((fn<(e :: E)>(m: (marker :: (E, V) -> V)<(e :: E),c1>, @_wildcard-x638_16: (ev :: ((E, V) -> V) -> V)<(b1 :: (E, V) -> V)>, x: (a, b, c, d)){
      (std/core/hnd/yield-to-final<a1,(e :: E),(e :: E),c1>(m, (fn<(e :: E)>(@_wildcard-x638_45: ((resume-result :: (V, V) -> V)<a1,c1>) -> (e :: E) c1){
          (match (x) {
            ((@skip std/core/types/Tuple4((x1: a) : a, (x2: b) : b, (x3: c) : c, (x4: d) : d) : (a, b, c, d) ) as @pat: (a, b, c, d))
               -> op(x1, x2, x3, x4);
          });
        })));
    }));
  };
 fun unsafe-try-finalize // inline size: 2
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> (e :: E) a){
    std/core/hnd/try-finalize-prompt<a,(e :: E)>((action()));
  };